/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.5.9 (3.5)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv3_5

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableWirelessLANRequestAuthCipher * `auto` - Auto * `tkip` - TKIP * `aes` - AES
type PatchedWritableWirelessLANRequestAuthCipher string

// List of PatchedWritableWirelessLANRequest_auth_cipher
const (
	PATCHEDWRITABLEWIRELESSLANREQUESTAUTHCIPHER_AUTO  PatchedWritableWirelessLANRequestAuthCipher = "auto"
	PATCHEDWRITABLEWIRELESSLANREQUESTAUTHCIPHER_TKIP  PatchedWritableWirelessLANRequestAuthCipher = "tkip"
	PATCHEDWRITABLEWIRELESSLANREQUESTAUTHCIPHER_AES   PatchedWritableWirelessLANRequestAuthCipher = "aes"
	PATCHEDWRITABLEWIRELESSLANREQUESTAUTHCIPHER_EMPTY PatchedWritableWirelessLANRequestAuthCipher = ""
)

// All allowed values of PatchedWritableWirelessLANRequestAuthCipher enum
var AllowedPatchedWritableWirelessLANRequestAuthCipherEnumValues = []PatchedWritableWirelessLANRequestAuthCipher{
	"auto",
	"tkip",
	"aes",
	"",
}

func (v *PatchedWritableWirelessLANRequestAuthCipher) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableWirelessLANRequestAuthCipher(value)
	for _, existing := range AllowedPatchedWritableWirelessLANRequestAuthCipherEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableWirelessLANRequestAuthCipher", value)
}

// NewPatchedWritableWirelessLANRequestAuthCipherFromValue returns a pointer to a valid PatchedWritableWirelessLANRequestAuthCipher
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableWirelessLANRequestAuthCipherFromValue(v string) (*PatchedWritableWirelessLANRequestAuthCipher, error) {
	ev := PatchedWritableWirelessLANRequestAuthCipher(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableWirelessLANRequestAuthCipher: valid values are %v", v, AllowedPatchedWritableWirelessLANRequestAuthCipherEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableWirelessLANRequestAuthCipher) IsValid() bool {
	for _, existing := range AllowedPatchedWritableWirelessLANRequestAuthCipherEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableWirelessLANRequest_auth_cipher value
func (v PatchedWritableWirelessLANRequestAuthCipher) Ptr() *PatchedWritableWirelessLANRequestAuthCipher {
	return &v
}

type NullablePatchedWritableWirelessLANRequestAuthCipher struct {
	value *PatchedWritableWirelessLANRequestAuthCipher
	isSet bool
}

func (v NullablePatchedWritableWirelessLANRequestAuthCipher) Get() *PatchedWritableWirelessLANRequestAuthCipher {
	return v.value
}

func (v *NullablePatchedWritableWirelessLANRequestAuthCipher) Set(val *PatchedWritableWirelessLANRequestAuthCipher) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableWirelessLANRequestAuthCipher) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableWirelessLANRequestAuthCipher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableWirelessLANRequestAuthCipher(val *PatchedWritableWirelessLANRequestAuthCipher) *NullablePatchedWritableWirelessLANRequestAuthCipher {
	return &NullablePatchedWritableWirelessLANRequestAuthCipher{value: val, isSet: true}
}

func (v NullablePatchedWritableWirelessLANRequestAuthCipher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableWirelessLANRequestAuthCipher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
