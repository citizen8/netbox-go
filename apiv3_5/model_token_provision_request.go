/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.5.9 (3.5)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv3_5

import (
	"encoding/json"
	"fmt"
)

// checks if the TokenProvisionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenProvisionRequest{}

// TokenProvisionRequest struct for TokenProvisionRequest
type TokenProvisionRequest struct {
	Username             string `json:"username"`
	Password             string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _TokenProvisionRequest TokenProvisionRequest

// NewTokenProvisionRequest instantiates a new TokenProvisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenProvisionRequest(username string, password string) *TokenProvisionRequest {
	this := TokenProvisionRequest{}
	this.Username = username
	this.Password = password
	return &this
}

// NewTokenProvisionRequestWithDefaults instantiates a new TokenProvisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenProvisionRequestWithDefaults() *TokenProvisionRequest {
	this := TokenProvisionRequest{}
	return &this
}

// GetUsername returns the Username field value
func (o *TokenProvisionRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *TokenProvisionRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *TokenProvisionRequest) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *TokenProvisionRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *TokenProvisionRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *TokenProvisionRequest) SetPassword(v string) {
	o.Password = v
}

func (o TokenProvisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenProvisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenProvisionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"password",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varTokenProvisionRequest := _TokenProvisionRequest{}

	err = json.Unmarshal(data, &varTokenProvisionRequest)

	if err != nil {
		return err
	}

	*o = TokenProvisionRequest(varTokenProvisionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenProvisionRequest struct {
	value *TokenProvisionRequest
	isSet bool
}

func (v NullableTokenProvisionRequest) Get() *TokenProvisionRequest {
	return v.value
}

func (v *NullableTokenProvisionRequest) Set(val *TokenProvisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenProvisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenProvisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenProvisionRequest(val *TokenProvisionRequest) *NullableTokenProvisionRequest {
	return &NullableTokenProvisionRequest{value: val, isSet: true}
}

func (v NullableTokenProvisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenProvisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
