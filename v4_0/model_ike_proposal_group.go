/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
)

// checks if the IKEProposalGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IKEProposalGroup{}

// IKEProposalGroup struct for IKEProposalGroup
type IKEProposalGroup struct {
	// * `1` - Group 1 * `2` - Group 2 * `5` - Group 5 * `14` - Group 14 * `15` - Group 15 * `16` - Group 16 * `17` - Group 17 * `18` - Group 18 * `19` - Group 19 * `20` - Group 20 * `21` - Group 21 * `22` - Group 22 * `23` - Group 23 * `24` - Group 24 * `25` - Group 25 * `26` - Group 26 * `27` - Group 27 * `28` - Group 28 * `29` - Group 29 * `30` - Group 30 * `31` - Group 31 * `32` - Group 32 * `33` - Group 33 * `34` - Group 34
	Value *int32 `json:"value,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NewIKEProposalGroup instantiates a new IKEProposalGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIKEProposalGroup() *IKEProposalGroup {
	this := IKEProposalGroup{}
	return &this
}

// NewIKEProposalGroupWithDefaults instantiates a new IKEProposalGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIKEProposalGroupWithDefaults() *IKEProposalGroup {
	this := IKEProposalGroup{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IKEProposalGroup) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IKEProposalGroup) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IKEProposalGroup) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *IKEProposalGroup) SetValue(v int32) {
	o.Value = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *IKEProposalGroup) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IKEProposalGroup) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *IKEProposalGroup) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *IKEProposalGroup) SetLabel(v string) {
	o.Label = &v
}

func (o IKEProposalGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IKEProposalGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return toSerialize, nil
}

type NullableIKEProposalGroup struct {
	value *IKEProposalGroup
	isSet bool
}

func (v NullableIKEProposalGroup) Get() *IKEProposalGroup {
	return v.value
}

func (v *NullableIKEProposalGroup) Set(val *IKEProposalGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableIKEProposalGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableIKEProposalGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIKEProposalGroup(val *IKEProposalGroup) *NullableIKEProposalGroup {
	return &NullableIKEProposalGroup{value: val, isSet: true}
}

func (v NullableIKEProposalGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIKEProposalGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


